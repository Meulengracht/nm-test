<refentry id="NMSettingBridge">
<refmeta>
<refentrytitle role="top_of_page" id="NMSettingBridge.top_of_page">NMSettingBridge</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBNM-UTIL Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>NMSettingBridge</refname>
<refpurpose>Describes bridging-related properties</refpurpose>
</refnamediv>

<refsynopsisdiv id="NMSettingBridge.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;nm-setting-bridge.h&gt;

#define             <link linkend="NM-SETTING-BRIDGE-SETTING-NAME--CAPS">NM_SETTING_BRIDGE_SETTING_NAME</link>
enum                <link linkend="NMSettingBridgeError">NMSettingBridgeError</link>;
#define             <link linkend="NM-TYPE-SETTING-BRIDGE-ERROR--CAPS">NM_TYPE_SETTING_BRIDGE_ERROR</link>
#define             <link linkend="NM-SETTING-BRIDGE-ERROR--CAPS">NM_SETTING_BRIDGE_ERROR</link>
<link linkend="GQuark">GQuark</link>              <link linkend="nm-setting-bridge-error-quark">nm_setting_bridge_error_quark</link>       (void);
#define             <link linkend="NM-SETTING-BRIDGE-IFNAME--CAPS">NM_SETTING_BRIDGE_IFNAME</link>
#define             <link linkend="NM-SETTING-BRIDGE-MEMBERS--CAPS">NM_SETTING_BRIDGE_MEMBERS</link>
                    <link linkend="NMSettingBridge-struct">NMSettingBridge</link>;
<link linkend="GType">GType</link>               <link linkend="nm-setting-bridge-get-type">nm_setting_bridge_get_type</link>          (void);
<link linkend="NMSetting">NMSetting</link> *         <link linkend="nm-setting-bridge-new">nm_setting_bridge_new</link>               (void);
const <link linkend="char">char</link> *        <link linkend="nm-setting-bridge-get-ifname">nm_setting_bridge_get_ifname</link>        (<link linkend="NMSettingBridge">NMSettingBridge</link> *setting);
<link linkend="guint32">guint32</link>             <link linkend="nm-setting-bridge-get-num-members">nm_setting_bridge_get_num_members</link>   (<link linkend="NMSettingBridge">NMSettingBridge</link> *setting);
const <link linkend="char">char</link> *        <link linkend="nm-setting-bridge-get-member">nm_setting_bridge_get_member</link>        (<link linkend="NMSettingBridge">NMSettingBridge</link> *setting,
                                                         <link linkend="guint32">guint32</link> i);
<link linkend="gboolean">gboolean</link>            <link linkend="nm-setting-bridge-add-member">nm_setting_bridge_add_member</link>        (<link linkend="NMSettingBridge">NMSettingBridge</link> *setting,
                                                         const <link linkend="char">char</link> *uuid);
<link linkend="void">void</link>                <link linkend="nm-setting-bridge-remove-member">nm_setting_bridge_remove_member</link>     (<link linkend="NMSettingBridge">NMSettingBridge</link> *setting,
                                                         <link linkend="guint32">guint32</link> i);
<link linkend="void">void</link>                <link linkend="nm-setting-bridge-clear-members">nm_setting_bridge_clear_members</link>     (<link linkend="NMSettingBridge">NMSettingBridge</link> *setting);
</synopsis>
</refsynopsisdiv>

<refsect1 id="NMSettingBridge.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="NMSetting">NMSetting</link>
         +----NMSettingBridge
</synopsis>
</refsect1>





<refsect1 id="NMSettingBridge.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="NMSettingBridge--ifname">ifname</link>&quot;                   <link linkend="gchar">gchar</link>*                : Read / Write / Construct
  &quot;<link linkend="NMSettingBridge--members">members</link>&quot;                  <link linkend="GSList-gchararray-">GSList_gchararray_</link>*   : Read / Write
</synopsis>
</refsect1>



<refsect1 id="NMSettingBridge.description" role="desc">
<title role="desc.title">Description</title>
<para>
The <link linkend="NMSettingBridge"><type>NMSettingBridge</type></link> object is a <link linkend="NMSetting"><type>NMSetting</type></link> subclass that describes
properties that apply to bridged network configurations.  Most importantly,
it contains a list of UUIDs of other <link linkend="NMConnection"><type>NMConnection</type></link> objects that are members
of the bridge.</para>
<para>
</para>
</refsect1>

<refsect1 id="NMSettingBridge.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="NM-SETTING-BRIDGE-SETTING-NAME--CAPS" role="macro">
<title>NM_SETTING_BRIDGE_SETTING_NAME</title>
<indexterm zone="NM-SETTING-BRIDGE-SETTING-NAME--CAPS"><primary sortas="NM_SETTING_BRIDGE_SETTING_NAME">NM_SETTING_BRIDGE_SETTING_NAME</primary></indexterm><programlisting>#define NM_SETTING_BRIDGE_SETTING_NAME "bridge"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="NMSettingBridgeError" role="enum">
<title>enum NMSettingBridgeError</title>
<indexterm zone="NMSettingBridgeError"><primary sortas="NMSettingBridgeError">NMSettingBridgeError</primary></indexterm><programlisting>typedef enum
{
	NM_SETTING_BRIDGE_ERROR_UNKNOWN = 0,
	NM_SETTING_BRIDGE_ERROR_INVALID_PROPERTY,
	NM_SETTING_BRIDGE_ERROR_MISSING_PROPERTY,
} NMSettingBridgeError;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="NM-TYPE-SETTING-BRIDGE-ERROR--CAPS" role="macro">
<title>NM_TYPE_SETTING_BRIDGE_ERROR</title>
<indexterm zone="NM-TYPE-SETTING-BRIDGE-ERROR--CAPS"><primary sortas="NM_TYPE_SETTING_BRIDGE_ERROR">NM_TYPE_SETTING_BRIDGE_ERROR</primary></indexterm><programlisting>#define NM_TYPE_SETTING_BRIDGE_ERROR (nm_setting_bridge_error_get_type ()) 
</programlisting>
<para>
</para></refsect2>
<refsect2 id="NM-SETTING-BRIDGE-ERROR--CAPS" role="macro">
<title>NM_SETTING_BRIDGE_ERROR</title>
<indexterm zone="NM-SETTING-BRIDGE-ERROR--CAPS"><primary sortas="NM_SETTING_BRIDGE_ERROR">NM_SETTING_BRIDGE_ERROR</primary></indexterm><programlisting>#define NM_SETTING_BRIDGE_ERROR nm_setting_bridge_error_quark ()
</programlisting>
<para>
</para></refsect2>
<refsect2 id="nm-setting-bridge-error-quark" role="function">
<title>nm_setting_bridge_error_quark ()</title>
<indexterm zone="nm-setting-bridge-error-quark"><primary sortas="nm_setting_bridge_error_quark">nm_setting_bridge_error_quark</primary></indexterm><programlisting><link linkend="GQuark">GQuark</link>              nm_setting_bridge_error_quark       (void);</programlisting>
<para>
Registers an error quark for <link linkend="NMSettingBridge"><type>NMSettingBridge</type></link> if necessary.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the error quark used for <link linkend="NMSettingBridge"><type>NMSettingBridge</type></link> errors.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="NM-SETTING-BRIDGE-IFNAME--CAPS" role="macro">
<title>NM_SETTING_BRIDGE_IFNAME</title>
<indexterm zone="NM-SETTING-BRIDGE-IFNAME--CAPS"><primary sortas="NM_SETTING_BRIDGE_IFNAME">NM_SETTING_BRIDGE_IFNAME</primary></indexterm><programlisting>#define NM_SETTING_BRIDGE_IFNAME   "ifname"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="NM-SETTING-BRIDGE-MEMBERS--CAPS" role="macro">
<title>NM_SETTING_BRIDGE_MEMBERS</title>
<indexterm zone="NM-SETTING-BRIDGE-MEMBERS--CAPS"><primary sortas="NM_SETTING_BRIDGE_MEMBERS">NM_SETTING_BRIDGE_MEMBERS</primary></indexterm><programlisting>#define NM_SETTING_BRIDGE_MEMBERS  "members"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="NMSettingBridge-struct" role="struct">
<title>NMSettingBridge</title>
<indexterm zone="NMSettingBridge-struct"><primary sortas="NMSettingBridge">NMSettingBridge</primary></indexterm><programlisting>typedef struct _NMSettingBridge NMSettingBridge;</programlisting>
<para>
</para></refsect2>
<refsect2 id="nm-setting-bridge-get-type" role="function">
<title>nm_setting_bridge_get_type ()</title>
<indexterm zone="nm-setting-bridge-get-type"><primary sortas="nm_setting_bridge_get_type">nm_setting_bridge_get_type</primary></indexterm><programlisting><link linkend="GType">GType</link>               nm_setting_bridge_get_type          (void);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="nm-setting-bridge-new" role="function">
<title>nm_setting_bridge_new ()</title>
<indexterm zone="nm-setting-bridge-new"><primary sortas="nm_setting_bridge_new">nm_setting_bridge_new</primary></indexterm><programlisting><link linkend="NMSetting">NMSetting</link> *         nm_setting_bridge_new               (void);</programlisting>
<para>
Creates a new <link linkend="NMSettingBridge"><type>NMSettingBridge</type></link> object with default values.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new empty <link linkend="NMSettingBridge"><type>NMSettingBridge</type></link> object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="nm-setting-bridge-get-ifname" role="function">
<title>nm_setting_bridge_get_ifname ()</title>
<indexterm zone="nm-setting-bridge-get-ifname"><primary sortas="nm_setting_bridge_get_ifname">nm_setting_bridge_get_ifname</primary></indexterm><programlisting>const <link linkend="char">char</link> *        nm_setting_bridge_get_ifname        (<link linkend="NMSettingBridge">NMSettingBridge</link> *setting);</programlisting>
<para>
Returns the <link linkend="NMSettingBridge--ifname"><type>"ifname"</type></link> property of the bridge.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>setting</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="NMSettingBridge"><type>NMSettingBridge</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the bridge interface name
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="nm-setting-bridge-get-num-members" role="function">
<title>nm_setting_bridge_get_num_members ()</title>
<indexterm zone="nm-setting-bridge-get-num-members"><primary sortas="nm_setting_bridge_get_num_members">nm_setting_bridge_get_num_members</primary></indexterm><programlisting><link linkend="guint32">guint32</link>             nm_setting_bridge_get_num_members   (<link linkend="NMSettingBridge">NMSettingBridge</link> *setting);</programlisting>
<para>
A bridge may have zero or more members, which are other <link linkend="NMConnection"><type>NMConnection</type></link> objects
that provide configuration of interfaces that will be added to this bridge
when the connection containing this <link linkend="NMSettingBridge"><type>NMSettingBridge</type></link> is activated.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>setting</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="NMSettingBridge"><type>NMSettingBridge</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of members of the bridge
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="nm-setting-bridge-get-member" role="function">
<title>nm_setting_bridge_get_member ()</title>
<indexterm zone="nm-setting-bridge-get-member"><primary sortas="nm_setting_bridge_get_member">nm_setting_bridge_get_member</primary></indexterm><programlisting>const <link linkend="char">char</link> *        nm_setting_bridge_get_member        (<link linkend="NMSettingBridge">NMSettingBridge</link> *setting,
                                                         <link linkend="guint32">guint32</link> i);</programlisting>
<para>
Returns the UUID of the member <link linkend="NMConnection"><type>NMConnection</type></link> referenced by <parameter>i</parameter>.  Members are
not stored in any particular order (nor is any ordering implied), and thus
the index should be viewed as an opaque pointer.  Members may be reordered
internally at any time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>setting</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="NMSettingBridge"><type>NMSettingBridge</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>i</parameter>&#160;:</term>
<listitem><simpara> the index of the bridge member to return
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the UUID of a <link linkend="NMConnection"><type>NMConnection</type></link> that is a member of this bridge
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="nm-setting-bridge-add-member" role="function">
<title>nm_setting_bridge_add_member ()</title>
<indexterm zone="nm-setting-bridge-add-member"><primary sortas="nm_setting_bridge_add_member">nm_setting_bridge_add_member</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            nm_setting_bridge_add_member        (<link linkend="NMSettingBridge">NMSettingBridge</link> *setting,
                                                         const <link linkend="char">char</link> *uuid);</programlisting>
<para>
Note that members are not stored in any particular order (nor is any ordering
implied).  Members may be reordered internally at any time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>setting</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="NMSettingBridge"><type>NMSettingBridge</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uuid</parameter>&#160;:</term>
<listitem><simpara> the UUID if an <link linkend="NMConnection"><type>NMConnection</type></link> to be added as a member of this bridge
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if the member was added, FALSE if the uuid was invalid or
previously added.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="nm-setting-bridge-remove-member" role="function">
<title>nm_setting_bridge_remove_member ()</title>
<indexterm zone="nm-setting-bridge-remove-member"><primary sortas="nm_setting_bridge_remove_member">nm_setting_bridge_remove_member</primary></indexterm><programlisting><link linkend="void">void</link>                nm_setting_bridge_remove_member     (<link linkend="NMSettingBridge">NMSettingBridge</link> *setting,
                                                         <link linkend="guint32">guint32</link> i);</programlisting>
<para>
Removes the bridge member UUID specified at index <parameter>i</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>setting</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="NMSettingBridge"><type>NMSettingBridge</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>i</parameter>&#160;:</term>
<listitem><simpara> the index of the bridge member to remove
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="nm-setting-bridge-clear-members" role="function">
<title>nm_setting_bridge_clear_members ()</title>
<indexterm zone="nm-setting-bridge-clear-members"><primary sortas="nm_setting_bridge_clear_members">nm_setting_bridge_clear_members</primary></indexterm><programlisting><link linkend="void">void</link>                nm_setting_bridge_clear_members     (<link linkend="NMSettingBridge">NMSettingBridge</link> *setting);</programlisting>
<para>
Removes all members of the bridge.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>setting</parameter>&#160;:</term>
<listitem><simpara> the <link linkend="NMSettingBridge"><type>NMSettingBridge</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="NMSettingBridge.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="NMSettingBridge--ifname" role="property"><title>The <literal>&quot;ifname&quot;</literal> property</title>
<indexterm zone="NMSettingBridge--ifname"><primary sortas="NMSettingBridge:ifname">NMSettingBridge:ifname</primary></indexterm><programlisting>  &quot;ifname&quot;                   <link linkend="gchar">gchar</link>*                : Read / Write / Construct</programlisting>
<para>
Bridges can (optionally) be assigned a specific name, such as br0.  Be
aware that assigning a name may cause the connection to fail if there
is already an existing bridge with the same name (for example, created
outside of NetworkManager).  Leaving the <link linkend="NMSettingBridge--ifname"><type>"ifname"</type></link> allows
an unused interface name to be used instead.</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="NMSettingBridge--members" role="property"><title>The <literal>&quot;members&quot;</literal> property</title>
<indexterm zone="NMSettingBridge--members"><primary sortas="NMSettingBridge:members">NMSettingBridge:members</primary></indexterm><programlisting>  &quot;members&quot;                  <link linkend="GSList-gchararray-">GSList_gchararray_</link>*   : Read / Write</programlisting>
<para>
A bridge may have 0 or more members, that is interfaces to be added
to the bridge when it is activated.  Each 'member' is the
(<link linkend="NMSettingConnection--uuid"><type>"uuid"</type></link>) of an <link linkend="NMConnection"><type>NMConnection</type></link> object.  To be
successfully activated, each of the members <link linkend="NMConnections"><type>NMConnections</type></link> must be valid
available to NetworkManager.  All members must be successfully added
to the bridge or the activation will fail.  A member <link linkend="NMConnection"><type>NMConnection</type></link> must
refer to a bridgable device such as an ethernet or wifi device.</para>
<para>
</para></refsect2>

</refsect1>




</refentry>
